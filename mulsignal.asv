clear
clc
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%HW1 - 2D DCT/IDCT
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
RGB = imread('김혜나.jpg'); %이미지 load
%imshow(RGB); 
R = RGB(:,:,1);
G = RGB(:,:,2);
B = RGB(:,:,3);
[height,width]=size(R);
Y = zeros(height,width);
for i = 1:height
    for j = 1:width
       Y(i,j) = R(i,j)*0.299 + G(i,j)*0.587 + R(i,j)*0.144;
    end
end
Y = Y(1:256,1:256); %이미지 자르기
%Y 출력 및 저장
%imshow(Y)
%imwrite(Y,'Y.jpeg')

%2D DCT 
c0 = sqrt(2)/2;
c1 = 1;
F = zeros(256,256);
for u=0:31
    for v=0:31
        %한블록 생성 
        block = zeros(8,8);
        for k = 1:8
            for p = 1:8
                block(k,p) = Y((u*8)+k,(v*8)+p);
            end
        end
        %한블록 DCT
        for k = 1:8
            for p = 1:8
               sum = 0; 
               for i=0:7
                   for j=0:7
                       sum = sum + cos(((2*i+1)*(k-1)*pi)/16)*cos(((2*j+1)*(p-1)*pi)/16)*block(i+1,j+1);
                   end
               end
               if k-1==0 && p-1==0
                  sum = (c0*c0/4)*sum;
               elseif k-1~=0 && p-1~=0
                  sum = (c1*c1/4)*sum;
               else
                  sum = (c0*c1/4)*sum;
               end
               F((u*8)+k,(v*8)+p) = sum;
            end
        end
        %한블록DCT 완료
    end
end
%2차원 DCT 완료
%F 출력 및 저장 
%F = int32(F); %int type
%figure(2)
%imshow(F)
%save('DCT_result.mat','F')

%2D IDCT 
f = zeros(256,256);
for i=0:31
    for j=0:31
        %한블록 생성 
        block = zeros(8,8);
        for k = 1:8
            for p = 1:8
                block(k,p) = F((i*8)+k,(j*8)+p);
            end
        end
        %한블록 IDCT
        for k = 1:8
            for p = 1:8
               sum = 0;
               for u=0:7
                   for v=0:7
                       if u==0 && v==0
                           c = c0*c0;
                       elseif u~=0 && v~=0
                           c = c1*c1;
                       else
                           c = c0*c1;
                       end
                       sum = sum + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block(u+1,v+1);
                   end
               end
               if sum>255 %clipping
                   sum = 255;
               elseif sum<0
                   sum = 0;
               end
               f((i*8)+k,(j*8)+p) = sum;
            end
        end
        %한블록 IDCT 완료
    end
end
%2차원 IDCT 완료
%f = uint8(f); %unsigned char type
%f 출력 및 저장 
%figure(3)
%imshow(f)
%save('IDCT_result.mat','f')
%imwrite(f,'IDCT.jpeg')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%HW2 - quantization
%      inverse quantization
%      MSE, PSNR
%      1. quantization matrix 사용
%      2. quantization 평균값 사용
%      3. inverse quantization (0,0)만 유지
%      4. inverse quantization (0,0),(1,0),(0,1)만 유지
%      5. inverse quantization (0,0),(1,0),(0,1),(2,0),(0,2),(1,1)만 유지
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%quantization matrix
Q = [16  11  10  16  24   40   51   61   
12  12  14  19  26   58   60   55   
14  13  16  24  40   57   69   56   
14  17  22  29  51   87   80   62   
18  22  37  56  68   109  103  77   
24  35  55  64  81   104  113  92   
49  64  78  87  103  121  120  101  
72  92  95  98  112  100  103  99 ];
%quantization matrix mean
tmp = Q(:);
Qmean = mean(tmp); 

%quantization
qF1 = zeros(256,256);
qF2 = zeros(256,256);
for u=0:31
    for v=0:31
        %한블록 생성 
        for k = 1:8
            for p = 1:8
                qF1((u*8)+k,(v*8)+p) = round(F((u*8)+k,(v*8)+p)/Q(k,p));
                qF2((u*8)+k,(v*8)+p) = round(F((u*8)+k,(v*8)+p)/Qmean);
            end
        end
    end
end 
%quantization 완료

%inverse quantization
iqF1 = zeros(256,256);
iqF2 = zeros(256,256);
iqF3 = zeros(256,256);
iqF4 = zeros(256,256);
iqF5 = zeros(256,256);
for u=0:31
    for v=0:31
        %한블록 생성 
        for k = 1:8
            for p = 1:8
                if(k==1 && p==1)
                    iqF3((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                    iqF4((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                    iqF5((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                elseif((k==2 && p==1) || (k==1 && p==2))
                    iqF4((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                    iqF5((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                elseif((k==2&&p==2) || (k==3 && p==1) || (k==1 && p==3))
                    iqF5((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                end
                iqF1((u*8)+k,(v*8)+p) = qF1((u*8)+k,(v*8)+p)*Q(k,p);
                iqF2((u*8)+k,(v*8)+p) = qF2((u*8)+k,(v*8)+p)*Qmean;
            end
        end
    end
end 
%inverse quantization 완료

%2D IDCT 
f1 = zeros(256,256);
f2 = zeros(256,256);
f3 = zeros(256,256);
f4 = zeros(256,256);
f5 = zeros(256,256);
for i=0:31
    for j=0:31
        %한블록 생성 
        block1 = zeros(8,8);
        block2 = zeros(8,8);
        block3 = zeros(8,8);
        block4 = zeros(8,8);
        block5 = zeros(8,8);
        for k = 1:8
            for p = 1:8
                block1(k,p) = iqF1((i*8)+k,(j*8)+p);
                block2(k,p) = iqF2((i*8)+k,(j*8)+p);
                block3(k,p) = iqF3((i*8)+k,(j*8)+p);
                block4(k,p) = iqF4((i*8)+k,(j*8)+p);
                block5(k,p) = iqF5((i*8)+k,(j*8)+p);
            end
        end
        %한블록 IDCT
        for k = 1:8
            for p = 1:8
                sum1=0;sum2=0;sum3=0;sum4=0;sum5=0;
                for u=0:7
                   for v=0:7
                       if u==0 && v==0
                           c = c0*c0;
                       elseif u~=0 && v~=0
                           c = c1*c1;
                       else
                           c = c0*c1;
                       end
                       sum1 = sum1 + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block1(u+1,v+1);
                       sum2 = sum2 + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block2(u+1,v+1);
                       sum3 = sum3 + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block3(u+1,v+1);
                       sum4 = sum4 + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block4(u+1,v+1);
                       sum5 = sum5 + c/4*cos(((2*(k-1)+1)*u*pi)/16)*cos(((2*(p-1)+1)*v*pi)/16)*block5(u+1,v+1);
                   end
               end
               f1((i*8)+k,(j*8)+p) = clipping(sum1);
               f2((i*8)+k,(j*8)+p) = clipping(sum2);
               f3((i*8)+k,(j*8)+p) = clipping(sum3);
               f4((i*8)+k,(j*8)+p) = clipping(sum4);
               f5((i*8)+k,(j*8)+p) = clipping(sum5);
            end
        end
        %한블록 IDCT 완료
    end
end
%2차원 IDCT 완료

%MSE 계산
sum=0;sum1=0;sum2=0;sum3=0;sum4=0;sum5=0;
Y = int32(Y);
for i=1:256
    for j = 1:256
        sum = sum + power((Y(i,j)-f(i,j)),2);
        sum1 = sum1+power((Y(i,j)-f1(i,j)),2);
        sum2 = sum2+power((Y(i,j)-f2(i,j)),2);
        sum3 = sum3+power((Y(i,j)-f3(i,j)),2);
        sum4 = sum4+power((Y(i,j)-f4(i,j)),2);
        sum5 = sum5+power((Y(i,j)-f5(i,j)),2);
    end
end
mse = single(sum/(256*256));
mse1 = single(sum1/(256*256));
mse2 = single(sum2/(256*256));
mse3 = single(sum3/(256*256));
mse4 = single(sum4/(256*256));
mse5 = single(sum5/(256*256));

%PSNR 계산
psnr = 10*log10((255*255)/mse);
psnr1 = 10*log10((255*255)/mse1);
psnr2 = 10*log10((255*255)/mse2);
psnr3 = 10*log10((255*255)/mse3);
psnr4 = 10*log10((255*255)/mse4);
psnr5 = 10*log10((255*255)/mse5);

f = uint8(f); %unsigned char type
f2 = uint8(f2); %unsigned char type
f3 = uint8(f3); %unsigned char type
f4 = uint8(f4); %unsigned char type
f5 = uint8(f5); %unsigned char type

%화면 출력, reconstructed image 저장
figure(4)
subplot(2,3,1)
imshow(f)
title('1')
imwrite(f,'a.jpeg')
subplot(2,3,2)
imshow(f2)
title('2')
imwrite(f2,'b.jpeg')
subplot(2,3,3)
imshow(f3)
title('3')
imwrite(f3,'c.jpeg')
subplot(2,3,4)
imshow(f4)
title('4')
imwrite(f4,'d.jpeg')
subplot(2,3,5)
imshow(f5)
title('5')
imwrite(f5,'e.jpeg')
% imwrite(f,'IDCT.jpeg')





